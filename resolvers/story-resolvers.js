const ObjectId = require('mongoose').Types.ObjectId;
const mongoose = require('mongoose');
const User = require('../models/user-model');
const Story = require('../models/story-model');
const StoryBoard = require("../models/storyboard-model");
const ForumPost = require('../models/forum-post-model');
const ForumTopic = require('../models/forum-topic-model');

module.exports = {
    Query: {

    },
    Mutation: {
        createStory: async(_, args, { req, res }) => {
            console.log("ASDADSA")
            const { storyInput } = args;
            const userId = new ObjectId(req.userId);
            const forumId = new ObjectId();
            const storyBoardId = new ObjectId();
            const userObj = await User.findOne({_id:userId});
            const storyId = new ObjectId();
            let storyObj = new Story({
                _id: storyId,
                series_title: storyInput.series_title,
                author: userId,
                author_username: userObj.username,
                synopsis: storyInput.synopsis,
                genres: storyInput.genres,
                num_chapters: 0,
                chapters: [],
                views: 0,
                num_favorites: 0,
                discussion_post: forumId,
                current_rating: 5,
                num_of_ratings: 0,
                total_ratings: 0,
                publication_date: 0,
                completed: false,
                cover_image: storyInput.cover_image,
                storyboard: storyBoardId
            });
            await storyObj.save();

            let storyboardObj = new StoryBoard({
                _id: storyBoardId,
                series_id: storyId,
                characters:[],
                plot_points: []
            })
            await storyboardObj.save();

            const discussionTitle = storyInput.series_title + " Discussion";
            const timestamp = Date.now();
            const discussionContent = "Autogenerated discussion post for " + storyInput.series_title;
            const topicId = new ObjectId("6242239f4b2619473abf93b2");
            const autoModID = new ObjectId("62421d2581c236eea8dd011f");
            const forumPost = new ForumPost({
                _id: forumId,
                title: discussionTitle,
                content: discussionContent,
                tags: ["Discussion"],
                linked_comic: storyId,
                linked_story: null,
                author: autoModID,
                replies: [],
                num_replies: 0,
                views: 0,
                timestamp: timestamp,
                topic: topicId
            });
            await forumPost.save();
            
            userObj.user_stories.push(storyObj);
            await User.updateOne({ _id: userId}, {user_stories: userObj.user_stories})
            const topic = await ForumTopic.findOne({_id: topicId});
            topic.posts.push(forumPost);
            await ForumTopic.updateOne({ _id: topicId}, {posts: topic.posts});

            return storyObj;
        }, 
        editStory: async (_, args, { req, res }) => {
            const { storyID, storyInput } = args;
            const storyObjId = new ObjectId(storyID);
            const story = await Story.findOne({_id:storyObjId});
            await Story.updateOne({_id:storyObjId},
                {
                    synopsis: storyInput.synopsis,
                    series_title: storyInput.series_title,
                    genres: storyInput.genres,
                    cover_image: storyInput.cover_image
                }
            );
            const discussionPost = await ForumPost.findOne({_id:story.discussion_post});
            const newTitle = storyInput.series_title + " Discussion";
            const newContent = "Autogenerated discussion post for " + storyInput.series_title;
            await ForumPost.updateOne({_id:story.discussion_post}, {title:newTitle, content:newContent});
            return true;
        },
        deleteStory: async (_, args, { req, res }) => {
            const { storyID } = args;
            const storyObjId = new ObjectId(storyID);
            const story = await Story.findOne({_id:storyObjId});
            const user = await Story.findOne({_id:story.author});
            const post = await ForumPost.findOne({_id:story.discussion_post});
            const topic = await ForumTopic.findOne({_id:post.topic});

            await Story.deleteOne({_id:storyObjId});
            await ForumPost.deleteOne({_id:comic.discussion_post});

            story.user_stories = user.user_stories.filder(c => c.toString() !== comicID);
            await Story.updateOne({_id:story.author}, {user_stories:user.user_stories});

            topic.posts = topic.posts.filder(p => p.toString() !== post._id.toString());
            await ForumTopic.updateOne({_id:post.topic}, {posts:topic.posts});
            return true;
        }

    }
}