const ObjectId = require('mongoose').Types.ObjectId;
const mongoose = require('mongoose');
const User = require('../models/user-model');
const Comic = require('../models/comic-model');
const ForumPost = require('../models/forum-post-model');
const ForumTopic = require('../models/forum-topic-model');

module.exports = {
  Query: {
  },
  Mutation: {
    createComic: async (_, args, { req,res }) => {
      // *****************************************
      // *****************************************
      // *****************************************
      // *****************************************
      // *****************************************
      // *****************************************
      // *****************************************
      // *****************************************
      // *****************************************
      // *****************************************
      // *****************************************
      // *****************************************
      // REMEMBER TO FIGURE OUT COVER IMAGE FOR EVERYTHING HERE
      const {comicInput} = args;
      const userId = new ObjectId(req.userId);
      const forumId = new ObjectId();
      const userObj = await User.findOne({_id:userId});
      const comicId = new ObjectId();
      let comicObj = new Comic({
        _id: comicId,
        series_title: comicInput.series_title,
        author: userId,
        author_username: userObj.username,
        synopsis: comicInput.synopsis,
        genres: comicInput.genres,
        num_chapters: 0,
        chapters: [],
        views: 0,
        num_favorites: 0,
        discussion_post:forumId,
        current_rating: 5,
        num_of_ratings: 0,
        total_ratings: 0,
        publication_date: 0,
        completed: false,
        cover_image: comicInput.cover_image
      });
      await comicObj.save();

      userObj.user_comics.push(comicId);
      await User.updateOne({_id:userId},{user_comics:userObj.user_comics});
      // *****************************************
      // *****************************************
      // *****************************************
      // *****************************************
      // *****************************************
      // *****************************************
      // *****************************************
      // *****************************************
      // *****************************************
      // *****************************************
      // *****************************************
      // *****************************************
      // ADD IN THE AUTHOR NAME LATER FOR HERE AND FORUM MUTATIONS
      const discussionTitle = comicInput.series_title + " Discussion";
      const timestamp = Date.now();
      const discussionContent = "Autogenerated discussion post for " + comicInput.series_title;
      // WHEN PUBLISHING A WORK NEED TO UPDATE IT TO GO UNDER COMIC DISCUSSIONS
      // Hard coded objectId for unpublished discussion post topic section
      const topicId = new ObjectId("6242239f4b2619473abf93b2");
      // Hard coded user id for automoderator
      const autoModID = new ObjectId("62421d2581c236eea8dd011f");
      const forumPost = new ForumPost ({
        _id: forumId,
        title: discussionTitle,
        content: discussionContent,
        tags: ["Discussion"],
        linked_comic: comicId,
        linked_story: null,
        author: autoModID,
        author_name: "AutoModerator",
        replies: [],
        num_replies: 0,
        views: 0,
        timestamp: timestamp,
        topic: topicId
      });
      await forumPost.save();

      const topic = await ForumTopic.findOne({_id:topicId});
      topic.posts.push(forumPost);
      await ForumTopic.updateOne({_id:topicId},{posts:topic.posts});


      return comicObj;
    },
    editComic: async (_, args, { req,res }) => {
      const {comicID, comicInput} = args;
      const comicObjId = new ObjectId(comicID);
      const comic = await Comic.findOne({_id:comicObjId});
      await Comic.updateOne({_id:comicObjId},
        {
          synopsis:comicInput.synopsis,
          series_title:comicInput.series_title,
          genres:comicInput.genres,
          cover_image:comicInput.cover_image
        }
      );
      const discussionPost = await ForumPost.findOne({_id:comic.discussion_post})
      const newTitle = comicInput.series_title + " Discussion";
      const newContent = "Autogenerated discussion post for " + comicInput.series_title;
      await ForumPost.updateOne({_id:comic.discussion_post},{title:newTitle,content:newContent});
      return true;
    },
    deleteComic: async (_, args, { req,res }) => {
      const {comicID} = args;
      const comicObjId = new ObjectId(comicID);
      const comic = await Comic.findOne({_id:comicObjId});
      const user = await User.findOne({_id:comic.author});
      const post = await ForumPost.findOne({_id:comic.discussion_post});
      const topic = await ForumTopic.findOne({_id:post.topic});

      await Comic.deleteOne({_id:comicObjId});
      await ForumPost.deleteOne({_id:comic.discussion_post})

      user.user_comics = user.user_comics.filter(c => c.toString() !== comicID);
      await User.updateOne({_id:comic.author},{user_comics:user.user_comics});

      topic.posts = topic.posts.filter(p => p.toString() !== post._id.toString());
      await ForumTopic.updateOne({_id:post.topic},{posts:topic.posts});
      return true;
    },
    rateComic: async (_, args, { req,res }) => {
      const {comicID, rating} = args;
      const comicObjId = new ObjectId(comicID);
      const comic = await Comic.findOne({_id:comicObjId});
      const userObjId = new ObjectId(req.userId);
      const user = await User.findOne({_id:userObjId});
      const rated = user.rated_comics.filter(comic => comic.comic.toString() == comicID);
      if(rated.length == 0){
        comic.num_of_ratings++;
        comic.total_ratings += rating;
        comic.current_rating = comic.total_ratings / comic.num_of_ratings;
        user.rated_comics.push({comic:comicObjId,rating: rating});
      }
      else {
        comic.total_ratings = comic.total_ratings + rating - rated[0].rating;
        comic.current_rating = comic.total_ratings / comic.num_of_ratings;
        user.rated_comics.forEach((ratedComic,i) => {
          if(ratedComic.comic.toString() == comicID){
            user.rated_comics[i] = {comic:comicObjId,rating: rating};
          }
        })
      }
      await User.updateOne({_id:userObjId},{rated_comics:user.rated_comics});

      await Comic.updateOne({_id:comicObjId},
        {
          num_of_ratings:comic.num_of_ratings,
          total_ratings:comic.total_ratings,
          current_rating:comic.current_rating
        }
      );
      return true;
    }
  }
};
